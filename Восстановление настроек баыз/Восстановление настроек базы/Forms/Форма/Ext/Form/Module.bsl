
#Область ОсновнаяОбласть

&НаКлиенте
Процедура Загрузить(Команда)
	
	БазыДанных = НастройкиБазДанныхИзФайла();
	ТекущаяБазаДанных = НайтиТекущуюБазу(БазыДанных);
	Если ТекущаяБазаДанных = Неопределено Тогда
		СообщитьПользователю("В файле настроек не найден текущая база данных");
		Возврат;
	КонецЕсли; 

	УстановкаНастроекНаСервере(ТекущаяБазаДанных);
	УстановкаНастроекНаКлиенте(ТекущаяБазаДанных);
	
	ПоказатьПредупреждение(, "Настройки успешно загружены");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуСНастройкамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл с настройками базы данных";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуСНастройками;	
	ДиалогВыбораФайла.Фильтр = "Настройки баз данных (*.json)|*.json|";
	ПутьКФайлуСНастройкамиВыборЗавершение = Новый ОписаниеОповещения("ПутьКФайлуСНастройкамиВыборЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ПутьКФайлуСНастройкамиВыборЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуСНастройкамиВыборЗавершение(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ПутьКФайлуСНастройками = ВыбранныеФайлы [0]; 	
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура УстановкаНастроекНаСервере(ТекущаяБазаДанных)
	
	ИсправитьОшибкиБазыПриОбновлении();
	НачатьТранзакцию();
	Попытка	
		Если НЕ БлокировкаРаботыСВнешнимиРесурсами.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
			БлокировкаРаботыСВнешнимиРесурсами.ЗапретитьРаботуСВнешнимиРесурсами();	
		КонецЕсли; 
		
		Для Каждого Расширение Из ЗначениеПараметра(ТекущаяБазаДанных, "Расширения", Новый Массив) Цикл
			ПодключитьРасширениеБазыДанных(Расширение);	
		КонецЦикла; 
		
		ПодключитьВебСервисДокументооборота(ТекущаяБазаДанных);
		ОтключитьРегламентныеЗадания(ТекущаяБазаДанных);
		ОткрытьПериод(ТекущаяБазаДанных);
		ОбновитьТомХраненияФайлов(ТекущаяБазаДанных);
		УстановитьДополнительныеНастройки(ТекущаяБазаДанных);
		ОтключитьДополнительныеОкна();
		УстановитьЗаголовокСистемы(ТекущаяБазаДанных);
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОчиститьРабочийСтол(ТекущаяБазаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаНастроекНаКлиенте(ПараметрыБазыДанных)
	
	ЗаполнитьНастройкиОбменаДанными(ПараметрыБазыДанных);
	ОбновитьПовторноИспользуемыеЗначения();	
	
КонецПроцедуры

#КонецОбласти 

#Область Расширения

&НаСервереБезКонтекста
Процедура ПодключитьРасширениеБазыДанных(Расширение)
	
	ФайлРасширение = Новый Файл(Расширение.Путь);
	Если НЕ ФайлРасширение.Существует() Тогда
		СообщитьПользователю(КА_СтрШаблон("Отсутствует расширение в каталоге: %1", Расширение.Путь));
		Возврат;
	КонецЕсли; 
	
	ПодключаемыеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Расширение.Имя));
	Перезаписывать = ЗначениеПараметра(Расширение, "Перезаписывать", Ложь);
	Если ПодключаемыеРасширения.Количество() Тогда
		Если НЕ Перезаписывать Тогда
			СообщитьПользователю(КА_СтрШаблон("Расширение %1 подключено ранее", Расширение.Путь));
			Возврат;
		КонецЕсли; 
		ПодключенноеРасширение = ПодключаемыеРасширения[0]; 
	Иначе
		ПодключенноеРасширение = РасширенияКонфигурации.Создать();
	КонецЕсли;	
	
	ПодключенноеРасширение.Активно											= Истина;
	ПодключенноеРасширение.БезопасныйРежим									= Ложь;
	ЗащитаОтОпасныхДействий													= Новый ОписаниеЗащитыОтОпасныхДействий;
	ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях					= Ложь;
	ПодключенноеРасширение.ЗащитаОтОпасныхДействий							= ЗащитаОтОпасныхДействий;
	ПодключенноеРасширение.ИспользоватьОсновныеРолиДляВсехПользователей		= Ложь;
	ПодключенноеРасширение.ИспользуетсяВРаспределеннойИнформационнойБазе	= Ложь;
	ПодключенноеРасширение.ОбластьДействия									= ОбластьДействияРасширенияКонфигурации.ИнформационнаяБаза;
	
	ДвоичныеДанныеРасширения = Новый ДвоичныеДанные(Расширение.Путь);
	Попытка
		ПодключенноеРасширение.Записать(ДвоичныеДанныеРасширения);
	Исключение
		//При такое ошибке скорее всего открыт конфигуратора, 
		//Тогда не добавляем расширение просто
		СообщитьПользователю(КА_СтрШаблон("Ошибка при подключении расширения %1. Скорее всего открыт конфигуратор", Расширение.Имя));
		Возврат;
	КонецПопытки;
	
	Если ЗначениеПараметра(Расширение, "Проверять", Истина) Тогда
		РезультатПроверки = ПодключенноеРасширение.ПроверитьВозможностьПрименения();
		Если РезультатПроверки.Количество() Тогда
			ВызватьИсключение "Ошибка при проверке расширения" + Расширение.Имя; 
		КонецЕсли; 
	КонецЕсли; 
	
	Для Каждого Настройка Из ЗначениеПараметра(Расширение, "ДополнительныеНастройки", Новый Массив) Цикл
		МенеджерХранилищаПоИмени(Настройка.ИмяХранилища).Сохранить(Настройка.КлючНастроек, Настройка.Имя, Настройка.Значение);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Документооборот

&НаСервереБезКонтекста
Процедура ПодключитьВебСервисДокументооборота(ПараметрыБазыДанных)
	
	Если НЕ ЗначениеПараметра(ПараметрыБазыДанных, "ИспользоватьИнтеграциюС1СДокументооборот", Ложь) Тогда
		СохранитьЗначениеКонстанты("ИспользоватьИнтеграциюС1СДокументооборот", Ложь);
	Иначе
		АдресВебСервиса = ЗначениеПараметра(ПараметрыБазыДанных, "АдресВебСервиса1СДокументооборот", "");
		СохранитьЗначениеКонстанты("ИспользоватьИнтеграциюС1СДокументооборот", Истина);
		СохранитьЗначениеКонстанты("АдресВебСервиса1СДокументооборот", АдресВебСервиса);
		СохранитьЗначениеКонстанты("ИспользоватьПроцессыИЗадачи1СДокументооборота", Истина);
		СохранитьЗначениеКонстанты("ИспользоватьСогласованиеЧерез1СДокументооборот", Истина);
		СохранитьЗначениеКонстанты("ИспользоватьСвязанныеДокументы1СДокументооборота", Истина);	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбменДанными

&НаКлиенте
Процедура ЗагрузитьАктуальныеПравилаИзРепозитория(НастройкаОбмена)
	//Метод выполняется на клиенте, так как нужен доступ к клиентскому каталогу с правилами
	
	РепозиторийСПравилами = ЗначениеПараметра(НастройкаОбмена, "РепозиторийСПравилами", "");
	ИмяПланаОбмена = ЗначениеПараметра(НастройкаОбмена, "ИмяПланаОбмена",  "");
	БазаИсточник = ЗначениеПараметра(НастройкаОбмена, "БазаИсточник",  "");
	БазаПриемник = ЗначениеПараметра(НастройкаОбмена, "БазаПриемник",  "");
	
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) 
		ИЛИ НЕ ЗначениеЗаполнено(БазаИсточник) 
		ИЛИ НЕ ЗначениеЗаполнено(БазаПриемник) 
		ИЛИ НЕ ЗначениеЗаполнено(РепозиторийСПравилами) Тогда
		Возврат;
	КонецЕсли; 
	
	КаталогПравилОбмена = ОбъединитьПути(РепозиторийСПравилами, БазаИсточник, БазаПриемник, "conversion");
	Если НЕ ФайлСуществует(КаталогПравилОбмена) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокАрхивов = Новый Массив;
	
	СписокЭлементовАрхива = Новый Массив;
	СписокЭлементовАрхива.Добавить(СобратьПравилаОбмена(РепозиторийСПравилами, БазаИсточник, БазаПриемник, "ExchangeRules", "conversion"));
	СписокЭлементовАрхива.Добавить(СобратьПравилаОбмена(РепозиторийСПравилами, БазаПриемник, БазаИсточник, "CorrespondentExchangeRules", "conversion"));
	
	СписокАрхивов.Добавить(Новый Структура("ПравилаОбмена", ПереместитьЭлементыВАрхив(СписокЭлементовАрхива)));
	
	ПутьКПравиламРегистрации = СобратьПравилаОбмена(РепозиторийСПравилами, БазаИсточник, БазаПриемник, "RegistrationRules", "registration");
	Если ЗначениеЗаполнено(ПутьКПравиламРегистрации) Тогда
		СписокЭлементовАрхива = Новый Массив;
		СписокЭлементовАрхива.Добавить(ПутьКПравиламРегистрации);
		СписокАрхивов.Добавить(Новый Структура("ПравилаРегистрации", ПереместитьЭлементыВАрхив(СписокЭлементовАрхива)));
	КонецЕсли; 
	
	ЗагрузитьПравилаНаСервере(ИмяПланаОбмена, СписокАрхивов, ВРег(БазаИсточник));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАктуальныеПравилаИзАрхива(НастройкаОбмена)
	//Метод выполняется на клиенте, так как нужен доступ к клиентскому каталогу с правилами
	
	ПутьКПравиламОбмена = ЗначениеПараметра(НастройкаОбмена, "ПравилаОбмена", "");
	ПравилаКонвертации = ЗначениеПараметра(НастройкаОбмена, "ПравилаКонвертации", "");
	ПравилаРегистрации = ЗначениеПараметра(НастройкаОбмена, "ПравилаРегистрации", "");
	
	ИмяПланаОбмена = ЗначениеПараметра(НастройкаОбмена, "ИмяПланаОбмена",  "");
	БазаИсточник = ЗначениеПараметра(НастройкаОбмена, "БазаИсточник",  "");
	
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) 
		ИЛИ НЕ ЗначениеЗаполнено(БазаИсточник) 
		ИЛИ 
		(НЕ ЗначениеЗаполнено(ПутьКПравиламОбмена)
		И НЕ ЗначениеЗаполнено(ПравилаКонвертации)
		И НЕ ЗначениеЗаполнено(ПравилаРегистрации)) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокАрхивов = Новый Массив;
	Если ЗначениеЗаполнено(ПутьКПравиламОбмена) Тогда
		
		ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКПравиламОбмена);
		// Загружаем правила обмена корреспондента и правила регистрации
		// При этом нужно делить на отдельные архивы, чтобы хотя бы какие-то объекты загрузились
		
		ЕстьExchangeRules = ЧтениеZIP.Элементы.Найти("ExchangeRules.xml") <> Неопределено;
		ЕстьCorrespondentExchangeRules = ЧтениеZIP.Элементы.Найти("CorrespondentExchangeRules.xml") <> Неопределено;
		ЕстьRegistrationRules = ЧтениеZIP.Элементы.Найти("RegistrationRules.xml") <> Неопределено;
		
		ИмяВременногоКаталога = ИмяВременногоКаталога();
		ЧтениеZIP.ИзвлечьВсе(ИмяВременногоКаталога);			
		ЧтениеZIP.Закрыть();
		
		Если ЕстьExchangeRules И ЕстьCorrespondentExchangeRules Тогда
			СписокЭлементовАрхива = Новый Массив;
			СписокЭлементовАрхива.Добавить(ОбъединитьПути(ИмяВременногоКаталога, "ExchangeRules.xml"));
			СписокЭлементовАрхива.Добавить(ОбъединитьПути(ИмяВременногоКаталога, "CorrespondentExchangeRules.xml"));
			СписокАрхивов.Добавить(Новый Структура("ПравилаОбмена", ПереместитьЭлементыВАрхив(СписокЭлементовАрхива)));
		КонецЕсли; 
		
		Если ЕстьRegistrationRules Тогда
			СписокЭлементовАрхива = Новый Массив;
			СписокЭлементовАрхива.Добавить(ОбъединитьПути(ИмяВременногоКаталога, "RegistrationRules.xml"));
			СписокАрхивов.Добавить(Новый Структура("ПравилаРегистрации", ПереместитьЭлементыВАрхив(СписокЭлементовАрхива)));
		КонецЕсли; 
			
		УдалитьФайлы(ИмяВременногоКаталога);
		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ПравилаРегистрации) Тогда
		Если РасширениеФайла(ПравилаРегистрации) = "XML" Тогда
			
			СписокЭлементовАрхива = Новый Массив;
			СписокЭлементовАрхива.Добавить(ПравилаРегистрации);
			СписокАрхивов.Добавить(Новый Структура("ПравилаРегистрации", ПереместитьЭлементыВАрхив(СписокЭлементовАрхива, Ложь)));
			
		ИначеЕсли РасширениеФайла(ПравилаРегистрации) = "ZIP" Тогда
			
			АдресАрхива = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПравилаРегистрации), Новый УникальныйИдентификатор);
			СписокАрхивов.Добавить(Новый Структура("ПравилаРегистрации", АдресАрхива));
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПравилаКонвертации) Тогда
		Если РасширениеФайла(ПравилаКонвертации) = "ZIP" Тогда
			АдресАрхива = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПравилаКонвертации), Новый УникальныйИдентификатор);
			СписокАрхивов.Добавить(Новый Структура("ПравилаОбмена", АдресАрхива));
		КонецЕсли; 
	КонецЕсли; 

	ЗагрузитьПравилаНаСервере(ИмяПланаОбмена, СписокАрхивов, ВРег(БазаИсточник));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьПравилаНаСервере(ИмяПланаОбмена, СписокПравил, БазаИсточник)
	
	Для Каждого ДанныеПравила Из СписокПравил Цикл
		Если ДанныеПравила.Свойство("ПравилаОбмена") Тогда
			Отказ = Ложь;
			ЗаписьПравилКонвертации = ЗаписьПравил(ИмяПланаОбмена, ПредопределенныйЭлементПоИмени("Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов"));
			РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, ЗаписьПравилКонвертации, ДанныеПравила.ПравилаОбмена, "ПКО_" + БазаИсточник, Истина);
			Если НЕ Отказ Тогда
				ЗаписьПравилКонвертации.Записать();
			КонецЕсли; 
		ИначеЕсли ДанныеПравила.Свойство("ПравилаРегистрации") Тогда
			Отказ = Ложь;
			ЗаписьПравилРегистрации = ЗаписьПравил(ИмяПланаОбмена, ПредопределенныйЭлементПоИмени("Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов"));
			РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, ЗаписьПравилРегистрации, ДанныеПравила.ПравилаРегистрации, "ПРО_" + БазаИсточник, Истина);
			Если НЕ Отказ Тогда
				ЗаписьПравилРегистрации.Записать();
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьПравил(ИмяПланаОбмена, ВидПравил)
	
	НастройкаПравилаОбмена = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьМенеджерЗаписи();
	НастройкаПравилаОбмена.ИмяПланаОбмена = ИмяПланаОбмена;
	НастройкаПравилаОбмена.ВидПравил = ВидПравил;
	НастройкаПравилаОбмена.Прочитать();
	Если НЕ НастройкаПравилаОбмена.Выбран() Тогда
		НастройкаПравилаОбмена.ИмяПланаОбмена = ИмяПланаОбмена;
		НастройкаПравилаОбмена.ВидПравил = ВидПравил;
	КонецЕсли; 
	НастройкаПравилаОбмена.ИсточникПравил = ПредопределенныйЭлементПоИмени("Перечисление.ИсточникиПравилДляОбменаДанными.Файл");
	
	Возврат НастройкаПравилаОбмена;	

КонецФункции
 
&НаКлиенте
Функция СобратьПравилаОбмена(РепозиторийПравилОбмена, Откуда, Куда, ИмяПравила, КаталогСПравилами)
	
	КаталогПравилОбмена = ОбъединитьПути(РепозиторийПравилОбмена, Откуда, Куда, КаталогСПравилами);
	Если НЕ ФайлСуществует(КаталогПравилОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяФайла = Вычислить("Новый Файл(КаталогПравилОбмена)").ИмяБезРасширения;
	
	КаталогСборки = ОбъединитьПути(РепозиторийПравилОбмена, ".build");
	
	Попытка
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("gitrules assembly ""%1"" ""%2""", КаталогПравилОбмена, КаталогСборки);
		КомандаСистемы(ТекстКоманды);		
	Исключение
		ПодробноеОписание = ПодробноеПредставлениеОшибки(ОписаниеОшибки());
		//Сообщить(ПодробноеОписание);
		ВызватьИсключение ПодробноеОписание;
	КонецПопытки;
	
	СобранныйФайл = ОбъединитьПути(КаталогСборки, ИмяФайла);
	ИмяРезультирующегоФайла = ОбъединитьПути(КаталогСборки, ИмяПравила + ".xml");
	ПереместитьФайл(СобранныйФайл, ИмяРезультирующегоФайла);
	Возврат ИмяРезультирующегоФайла;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНастройкиОбменаДанными(ПараметрыБазыДанных)
	
	НастройкиОбмена = ЗначениеПараметра(ПараметрыБазыДанных, "ОбменДанными", Новый Массив);	
	Для Каждого НастройкаОбмена Из НастройкиОбмена Цикл
		ВосстановитьНастройкиОбменаНаСервере(НастройкаОбмена);
		ЗагрузитьАктуальныеПравилаИзРепозитория(НастройкаОбмена);
		ЗагрузитьАктуальныеПравилаИзАрхива(НастройкаОбмена);
		ОбнулитьНомераСообщенийОбменаИРегистрацию(НастройкаОбмена);
	КонецЦикла; 
		   
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбнулитьНомераСообщенийОбменаИРегистрацию(НастройкаОбмена)
	
	ИмяПланаОбмена = ЗначениеПараметра(НастройкаОбмена, "ИмяПланаОбмена",  "");
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат;
	КонецЕсли; 
		
	УзелБазыПриемника = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(НастройкаОбмена.КодУзлаОбмена); //Документооборот, редакция 1.4 
	Если УзелБазыПриемника.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	УзелДокументооборотОбъект = УзелБазыПриемника.ПолучитьОбъект();
	УзелДокументооборотОбъект.НомерПринятого = 0;
	УзелДокументооборотОбъект.НомерОтправленного = 0;
	УзелДокументооборотОбъект.Записать();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелБазыПриемника);
	
	ОбщиеНастройкиУзлов = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьМенеджерЗаписи();
	ОбщиеНастройкиУзлов.УзелИнформационнойБазы = УзелБазыПриемника;
	ОбщиеНастройкиУзлов.Прочитать();
	Если НЕ ОбщиеНастройкиУзлов.Выбран() Тогда
		ОбщиеНастройкиУзлов.УзелИнформационнойБазы = УзелБазыПриемника;
		ОбщиеНастройкиУзлов.ПрефиксКорреспондента = НастройкаОбмена.КодУзлаОбмена;
	ИначеЕсли ОбщиеНастройкиУзлов.НастройкаЗавершена Тогда 	
		Возврат;
	КонецЕсли; 
	
	ОбщиеНастройкиУзлов.Префикс = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код;
	ОбщиеНастройкиУзлов.НастройкаЗавершена = Истина;
	ОбщиеНастройкиУзлов.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьНастройкиОбменаНаСервере(ПараметрыВыполнения)
	
	ИмяПланаОбмена = ЗначениеПараметра(ПараметрыВыполнения, "ИмяПланаОбмена",  "");
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МетаданныеСуществуют("ПланОбмена." + ИмяПланаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыВыполнения.Свойство("КодУзлаОбмена") Тогда
		СообщитьПользователю("Не установлен параметр ""КодУзлаОбмена"" в settings.json");
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогОбмена = ЗначениеПараметра(ПараметрыВыполнения, "КаталогОбмена", "");
	АдресВебСервера = ЗначениеПараметра(ПараметрыВыполнения, "АдресВебСервера", "");
	
	УзелБазыПриемника = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(ПараметрыВыполнения.КодУзлаОбмена); //Документооборот, редакция 1.4 
	Если УзелБазыПриемника.Пустая() Тогда
		//На случай если еще обмена не существует в принципе
		УзелПланаОбмена = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
		УзелПланаОбмена.Код = ПараметрыВыполнения.КодУзлаОбмена;
		УзелПланаОбмена.Наименование = ПараметрыВыполнения.КодУзлаОбмена;
		УзелПланаОбмена.Записать();
		УзелБазыПриемника = УзелПланаОбмена.Ссылка;
	КонецЕсли; 

	Если МетаданныеСуществуют("РегистрСведений.НастройкиТранспортаОбменаДанными") Тогда
		Настройкаобмена = РегистрыСведений["НастройкиТранспортаОбменаДанными"].СоздатьМенеджерЗаписи();
		НастройкаОбмена.Корреспондент = УзелБазыПриемника;
		Настройкаобмена.Прочитать();
		Если НЕ Настройкаобмена.Выбран() Тогда
			НастройкаОбмена.Корреспондент = УзелБазыПриемника;	
		КонецЕсли; 	
	ИначеЕсли МетаданныеСуществуют("РегистрСведений.НастройкиТранспортаОбмена") Тогда 	
		Настройкаобмена = РегистрыСведений["НастройкиТранспортаОбмена"].СоздатьМенеджерЗаписи();
		НастройкаОбмена.Узел = УзелБазыПриемника;	
		Настройкаобмена.Прочитать();
		Если НЕ Настройкаобмена.Выбран() Тогда
			НастройкаОбмена.Узел = УзелБазыПриемника;	
		КонецЕсли; 	
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КаталогОбмена) Тогда
		НастройкаОбмена.FILEКаталогОбменаИнформацией = КаталогОбмена;
		НастройкаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ПредопределенныйЭлементПоИмени("Перечисление.ВидыТранспортаСообщенийОбмена.FILE");		
	ИначеЕсли ЗначениеЗаполнено(АдресВебСервера) Тогда	
		
		Если ВРег(АдресВебСервера) <> "ПАССИВНЫЙ" Тогда
			НастройкаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ПредопределенныйЭлементПоИмени("Перечисление.ВидыТранспортаСообщенийОбмена.WS");
			НастройкаОбмена.WSURLВебСервиса = АдресВебСервера;
			НастройкаОбмена.WSЗапомнитьПароль = Истина;
			НастройкаОбмена.WSИмяПользователя = ЗначениеПараметра(ПараметрыВыполнения, "ИмяПользователя", "");
			НастройкаОбмена.WSИспользоватьПередачуБольшогоОбъемаДанных = Истина;		
			Если ПараметрыВыполнения.Свойство("Пароль") Тогда
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаОбмена.Корреспондент, ПараметрыВыполнения.Пароль, "WSПароль");	
			КонецЕсли; 	
		Иначе
			НастройкаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ПредопределенныйЭлементПоИмени("Перечисление.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим");
		КонецЕсли; 
		
	КонецЕсли; 
	
	Настройкаобмена.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ОтключениеРегламентныхЗаданий

&НаСервереБезКонтекста
Процедура ОтключитьРегламентныеЗадания(ПараметрыБазыДанных)
	
	Если НЕ ЗначениеПараметра(ПараметрыБазыДанных, "ОтключатьФоновыеЗадания", Истина) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокДопустимыхФоновыхЗаданий = ЗначениеПараметра(ПараметрыБазыДанных, "ДопустимыеФоновыеЗадания", Новый Массив);
	
	СписокРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Использование", Истина));
	Для Каждого РЗадание Из СписокРегламентныхЗаданий Цикл
		Если СписокДопустимыхФоновыхЗаданий.Найти(РЗадание.Метаданные.Имя) = Неопределено Тогда
			РЗадание.Использование = Ложь;
			РЗадание.Записать();
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти 

#Область ОткрытиеПериода

&НаСервереБезКонтекста
Процедура ОткрытьПериод(ПараметрыБазыДанных)
	
	ОткрытьПериод 			= ЗначениеПараметра(ПараметрыБазыДанных, "ОткрытьПериод", Ложь);
	ОткрытьПериодУпрУчет	= ЗначениеПараметра(ПараметрыБазыДанных, "ОткрытьПериодУпрУчет", Ложь);
	
	Если ОткрытьПериод И МетаданныеСуществуют("РегистрСведений.ДатыЗапретаИзменения") Тогда
		МенеджерЗаписи				= РегистрыСведений["ДатыЗапретаИзменения"].СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь	= ПредопределенныйЭлементПоИмени("Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей");
		МенеджерЗаписи.ДатаЗапрета	= ДобавитьМесяц(ТекущаяДата(), -12);
		МенеджерЗаписи.Комментарий	= "(По умолчанию)";
		МенеджерЗаписи.Раздел		= ПредопределенныйЭлементПоИмени("ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка");
		МенеджерЗаписи.Объект		= ПредопределенныйЭлементПоИмени("ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка");
		МенеджерЗаписи.Записать();
	КонецЕсли; 
	
	Если ОткрытьПериодУпрУчет И МетаданныеСуществуют("РегистрСведений.РТ_ДатыЗакрытияПериода")Тогда
		МенеджерЗаписи						= РегистрыСведений["РТ_ДатыЗакрытияПериода"].СоздатьМенеджерЗаписи(); 
		//чтобы не было ошибки там, где нет регистра
		МенеджерЗаписи.ДатаПредзакрытияБУ	= ДобавитьМесяц(ТекущаяДата(), -12);
		МенеджерЗаписи.ДатаЗапретаИзменения	= ДобавитьМесяц(ТекущаяДата(), -12);
		МенеджерЗаписи.Записать();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ТомаХраненияФайлов

&НаСервереБезКонтекста
Процедура ОбновитьТомХраненияФайлов(ПараметрыБазыДанных)
	
	ТомХраненияФайловПоУмолчанию = ЗначениеПараметра(ПараметрыБазыДанных, "ТомХраненияФалов", "");
	Если НЕ ЗначениеЗаполнено(ТомХраненияФайловПоУмолчанию) Тогда
		Возврат;
	КонецЕсли;  
	
	ТомХраненияФайловПоУмолчанию = УбратьСлешВКонце(ТомХраненияФайловПоУмолчанию);

	ВерсияСтандартныеПодсистемы = ВерсияПодсистемы("СтандартныеПодсистемы");
	
	Если ВерсияСтандартныеПодсистемы <> Неопределено И СравнитьВерсии(ВерсияСтандартныеПодсистемы, "2.2.3.0") < 0 Тогда
		//ДЛЯ ДОКУМЕНТООБОРОТА ВЕРСИИ 1.4.7.1 и ниже
		ПапкаГод = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(Формат(Год(ТекущаяДата()),"ЧГ="), Истина);
		Если НЕ ПапкаГод.Пустая() Тогда
			ПапкаГод = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(Формат(Год(ТекущаяДата()-1),"ЧГ="), Истина);
		КонецЕсли; 
		
		ПапкаНеИспользовать = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию("Не использовать", Истина);
		Если ПапкаНеИспользовать.Пустая() Тогда
			ПапкаНеИспользоватьОбъект = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
			ПапкаНеИспользоватьОбъект.Наименование = "Не использовать";
			ПапкаНеИспользоватьОбъект.Записать();
			ПапкаНеИспользовать = ПапкаНеИспользоватьОбъект.Ссылка;
		КонецЕсли;   
		
		ПапкаГруппаПоУмолчанию = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию("Группа по умолчанию", Истина);
		Если НЕ ПапкаГруппаПоУмолчанию.Пустая() Тогда
			КаталогПоУмолчанию = Справочники.ТомаХраненияФайлов.НайтиПоРеквизиту("ПорядокЗаполнения", 1, ПапкаГруппаПоУмолчанию);
			КаталогПоУмолчаниюОбъект = КаталогПоУмолчанию.ПолучитьОбъект();
			КаталогПоУмолчаниюОбъект.ОбменДанными.Загрузка = Истина;
			КаталогПоУмолчаниюОбъект.ПолныйПутьWindows = ТомХраненияФайловПоУмолчанию + "\";
			КаталогПоУмолчаниюОбъект.Записать();
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.Родитель = &Год
		|   И НЕ ТомаХраненияФайлов.Наименование ПОДОБНО &ПолныйПутьWindows";
		Запрос.УстановитьПараметр("Год", ПапкаГод);
		Запрос.УстановитьПараметр("ПолныйПутьWindows", ТомХраненияФайловПоУмолчанию);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТомОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТомОбъект.ОбменДанными.Загрузка = Истина;
			ТомОбъект.Родитель = ПапкаНеИспользовать;
			ТомОбъект.Записать();
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.Наименование ПОДОБНО &ПолныйПутьWindows";
		Запрос.УстановитьПараметр("ПолныйПутьWindows", ТомХраненияФайловПоУмолчанию);
		РезультатЗапроса = Запрос.Выполнить();
		//убираем текущие каталоги тома из каталога с годом, и добавляем свой
		Если РезультатЗапроса.Пустой() Тогда
			ТомаХраненияФайловОбъект = Справочники.ТомаХраненияФайлов.СоздатьЭлемент();
			ТомаХраненияФайловОбъект.ПорядокЗаполнения = 1;
			ТомаХраненияФайловОбъект.ПолныйПутьWindows = ТомХраненияФайловПоУмолчанию + "\";
			ТомаХраненияФайловОбъект.Наименование = ТомХраненияФайловПоУмолчанию;
			ТомаХраненияФайловОбъект.Родитель = ПапкаГод; 
			ТомаХраненияФайловОбъект.Записать();
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПолныйПутьWindows ПОДОБНО &ПолныйПутьWindows";
		Запрос.УстановитьПараметр("ПолныйПутьWindows", ТомХраненияФайловПоУмолчанию + "\");
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТомДляПерезаполнения = Справочники.ТомаХраненияФайлов.НайтиПоРеквизиту("ПорядокЗаполнения", 0);
			Если НЕ ТомДляПерезаполнения.Пустая() Тогда
				ТомПоУмолчаниюОбъъект = ТомДляПерезаполнения.ПолучитьОбъект();
				ТомПоУмолчаниюОбъъект.ОбменДанными.Загрузка = Истина;
				ТомПоУмолчаниюОбъъект.ПорядокЗаполнения = 200;
				ТомПоУмолчаниюОбъъект.Записать();
			КонецЕсли; 
			ТомаХраненияФайловОбъект = Справочники.ТомаХраненияФайлов.СоздатьЭлемент();
			ТомаХраненияФайловОбъект.ПорядокЗаполнения = 0;
			ТомаХраненияФайловОбъект.ПолныйПутьWindows = ТомХраненияФайловПоУмолчанию + "\";
			ТомаХраненияФайловОбъект.Наименование = ТомХраненияФайловПоУмолчанию;
			ТомаХраненияФайловОбъект.Записать();		
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти 

#Область РабочийСтол

&НаСервереБезКонтекста
Процедура ОчиститьРабочийСтол(ПараметрыБазыДанных)
	
	НеобходимоОчиститьРабочийСтол = ЗначениеПараметра(ПараметрыБазыДанных, "ОчиститьРабочийСтол", Ложь);
	Если НЕ НеобходимоОчиститьРабочийСтол Тогда
		Возврат;	
	КонецЕсли; 	
	
	//ОЧИЩАЕМ ФОРМЫ РАБОЧЕГО СТОЛА
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	
	//НАСТРАИВАЕМ ПАНЕЛЬ ПО УМОЛЧАНИЮ
	ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава.Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	
	НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиТакси.УстановитьСостав(НастройкиСостава);
			
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НастройкиТакси, , ПользователиИнформационнойБазы.ТекущийПользователь().Имя);

КонецПроцедуры

#КонецОбласти 

#Область ИсправлениеОшибокБазыПриОбновлении

&НаСервереБезКонтекста
Процедура ИсправитьОшибкиБазыПриОбновлении()
	
	ОбновитьНумерациюОбъектов(); //Исправление ошибки нумерации
	
КонецПроцедуры
 
#КонецОбласти 

#Область ДопонительныеНастройки

&НаСервереБезКонтекста
Процедура УстановитьДополнительныеНастройки(ПараметрыБазыДанных)
	
	Если ПараметрыБазыДанных.Свойство("ДополнительныеНастройки") И ПараметрыБазыДанных.ДополнительныеНастройки.Количество() Тогда
		Для Каждого Настройка Из ПараметрыБазыДанных.ДополнительныеНастройки Цикл
			МенеджерХранилищаПоИмени(Настройка.ИмяХранилища).Сохранить(Настройка.КлючНастроек, Настройка.Имя, Настройка.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокСистемы(ПараметрыБазыДанных)
	
	Если ПараметрыБазыДанных.Свойство("Заголовок") И ЗначениеЗаполнено(ПараметрыБазыДанных.Заголовок) Тогда
		СохранитьЗначениеКонстанты("ЗаголовокСистемы", ПараметрыБазыДанных.Заголовок);
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти 

#Область ОтключениеДополнительныхОкон

&НаСервереБезКонтекста
Процедура ОтключитьДополнительныеОкна()
	
	ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ВсегдаПоказыватьПриСтартеПрограммы", Ложь);
	ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ПоказПриСтартеТолькоПриИзменении", Ложь);
	
КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

&НаКлиенте
Функция НастройкиБазДанныхИзФайла()
	
	ТекущийКаталог = ТекущийКаталог();
	//ПутьКНастройкамЗаполнения = ОбъединитьПути(ТекущийКаталог, "Settings.json");
	
	Если НЕ ФайлСуществует(ПутьКФайлуСНастройками) Тогда
		ВызватьИсключение "Не найден файл ""Settings.json"" с настройками баз данных";
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуСНастройками);
	ПараметрыДляСохранения = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	ДополнительныеПараметры = ЗначениеПараметра(ПараметрыДляСохранения, "ДополнительныеПараметры", Новый Структура);
	ДополнительныеПараметры.Вставить("ТекущийКаталог", ТекущийКаталог);
	// ЭТО ВОЗМОЖНОСТЬ ИСПОЛЬЗОВАТЬ ШАБЛОНЫ ТЕКСТА ВНУТРИ САМИХ ШАБЛОНОВ
	ПодменитьПредопределенныеЗначения(ДополнительныеПараметры, ДополнительныеПараметры);
	
	БазыДанных = ЗначениеПараметра(ПараметрыДляСохранения, "БазыДанных", Новый Массив);
	ПодменитьПредопределенныеЗначения(БазыДанных, ДополнительныеПараметры);

	Возврат БазыДанных;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПодменитьПредопределенныеЗначения(ПараметрыДляСохранения, ДополнительныеПараметры)
	
	Если ТипЗнч(ПараметрыДляСохранения) = Тип("Структура") Тогда
		Для Каждого Элемент Из ПараметрыДляСохранения Цикл
			ЗначениеЭлемента = Элемент.Значение;
			ПодменитьПредопределенныеЗначения(ЗначениеЭлемента, ДополнительныеПараметры);
			ПараметрыДляСохранения.Вставить(Элемент.Ключ, ЗначениеЭлемента);
		КонецЦикла; 	
	ИначеЕсли ТипЗнч(ПараметрыДляСохранения) = Тип("Массив") Тогда
		Для Сч = 0 По ПараметрыДляСохранения.Количество() - 1 Цикл
			ТекущееЗначение = ПараметрыДляСохранения[Сч]; 
			//Используется такая конструкция, так как изменение 
			//по ссылке в массиве строкового значения не поддерживается
			ПодменитьПредопределенныеЗначения(ТекущееЗначение, ДополнительныеПараметры);	
			ПараметрыДляСохранения[Сч] = ТекущееЗначение;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ПараметрыДляСохранения) = Тип("Строка") Тогда 
		Для Каждого ПредопределенныйПараметр Из ДополнительныеПараметры Цикл
			Если Найти(ПараметрыДляСохранения, "$" + ПредопределенныйПараметр.Ключ + "$") <> 0 Тогда
				Если ТипЗнч(ПредопределенныйПараметр.Значение) = Тип("Строка") Тогда
					ПараметрыДляСохранения = СтрЗаменить(ПараметрыДляСохранения, 
															"$" + ПредопределенныйПараметр.Ключ + "$", 
															ПредопределенныйПараметр.Значение);
				Иначе
					ПараметрыДляСохранения = ПредопределенныйПараметр.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПараметра(Данные, ИмяПараметра, ЗначениеПоУмолчанию)
	
	Если Данные.Свойство(ИмяПараметра) Тогда
		Возврат Данные [ИмяПараметра];
	КонецЕсли; 
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции 

&НаКлиенте
Функция НайтиТекущуюБазу(БазыДанных)
	ТекущаяСтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
	Для Каждого База Из БазыДанных Цикл
		Если СтрокаСоединенияБазыИзПараметров(База) = ТекущаяСтрокаСоединения Тогда
			Возврат База;
		КонецЕсли; 								
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСоединенияБазыИзПараметров(База)
	
	КаталогБазы = ЗначениеПараметра(База, "Каталог", "");
	Сервер = ЗначениеПараметра(База, "Сервер", "");
	ИмяБазы = ЗначениеПараметра(База, "ИмяБазы", "");
	
	Если ЗначениеЗаполнено(Сервер) Тогда
		СтрокаСоединенияБазы = Врег(КА_СтрШаблон("Srvr=""%1"";Ref=""%2"";", Сервер, ИмяБазы));
	ИначеЕсли ЗначениеЗаполнено(КаталогБазы) Тогда 
		СтрокаСоединенияБазы = Врег(КА_СтрШаблон("File=""%1"";", УбратьСлешВКонце(КаталогБазы)));
	Иначе
		СтрокаСоединенияБазы = "";
	КонецЕсли;
	
	Возврат СтрокаСоединенияБазы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОбъединитьПути(Знач ЛеваяЧастьПути, Знач ЧастьПутиСправа1, Знач ЧастьПутиСправа2 = Неопределено, Знач ЧастьПутиСправа3 = Неопределено) Экспорт
	СимволРазделителяСтрок = ПолучитьРазделительПути();
	ЛеваяЧастьПути = УбратьСлешВКонце(ЛеваяЧастьПути);
	ЧастьПути = ЛеваяЧастьПути + СимволРазделителяСтрок + ЧастьПутиСправа1;
	
	Если ЧастьПутиСправа2 <> Неопределено И ЧастьПутиСправа3 <> Неопределено Тогда
		Возврат ОбъединитьПути(ЧастьПути, ЧастьПутиСправа2, ЧастьПутиСправа3);
	ИначеЕсли ЧастьПутиСправа2 <> Неопределено Тогда
		Возврат ОбъединитьПути(ЧастьПути, ЧастьПутиСправа2);
	Иначе
		Возврат ЧастьПути;
	КонецЕсли; 
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, КонстантаЗначение)
	
	Если Метаданные.Константы.Найти(КонстантаИмя) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КонстантаМенеджер = Константы[КонстантаИмя];		
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФайлСуществует(ПутьКФайлу)
	ФайлДляПроверки = Новый Файл(ПутьКФайлу);
	Возврат ФайлДляПроверки.Существует();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасширениеФайла(ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат ВРег(Файл.Расширение);
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ПереместитьЭлементыВАрхив(СписокЭлементовАрхива, УдалятьЭлементы = Истина)
	
	ПутьКАрхивуКПравилам = ПолучитьИмяВременногоФайла("zip");

	Архив = Новый ЗаписьZipФайла(ПутьКАрхивуКПравилам);
	Для Каждого ПутьКФайлу Из СписокЭлементовАрхива Цикл
		Архив.Добавить(ПутьКФайлу);
	КонецЦикла; 
	Архив.Записать();
	
	Если УдалятьЭлементы Тогда
		Для Каждого ПутьКФайлу Из СписокЭлементовАрхива Цикл
			УдалитьФайлы(ПутьКФайлу);
		КонецЦикла; 
	КонецЕсли; 
		
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКАрхивуКПравилам), Новый УникальныйИдентификатор);
	УдалитьФайлы(ПутьКАрхивуКПравилам);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

&НаСервере
Функция ТекущийКаталог()
	Файл = Новый Файл(РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла);
	Возврат УбратьСлешВКонце(Файл.Путь);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВременногоКаталога()
	Возврат ОбъединитьПути(КаталогВременныхФайлов(), СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
КонецФункции

&НаСервереБезКонтекста
Функция МенеджерХранилищаПоИмени(ИмяХранилища)
	Если ИмяХранилища = "ХранилищеСистемныхНастроек" Тогда
		Возврат ХранилищеСистемныхНастроек;
	ИначеЕсли ИмяХранилища = "ХранилищеОбщихНастроек" Тогда
		Возврат ХранилищеОбщихНастроек;
	ИначеЕсли ИмяХранилища = "ХранилищеВариантовОтчетов" Тогда 	
		Возврат ХранилищеВариантовОтчетов;
	Иначе
		ВызватьИсключение "Не найдено хранилище для имени " + ИмяХранилища;	
	КонецЕсли; 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КА_СтрШаблон(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = ЗаменитьПоШаблонуСтроки(ШаблонСтроки, "%9", Параметр9);
	//ЗАГЛУШКА, ЧТОБЫ "%" не обрабатывались как параметры
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, Символ(9787) + "%" + Символ(9787), "%");
	
	Возврат ШаблонСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаменитьПоШаблонуСтроки(ШаблонСтроки, ПараметрПоиска, Знач ЗначениеЗамены)

	Если ЗначениеЗамены = Неопределено Тогда
		Возврат ШаблонСтроки;
	КонецЕсли; 	
	
	Если КА_СтрНайти(ЗначениеЗамены, "%") <> 0 Тогда
		ЗначениеЗамены = СтрЗаменить(ЗначениеЗамены, "%", Символ(9787) + "%" + Символ(9787));
	КонецЕсли; 
	
	Возврат СтрЗаменить(ШаблонСтроки, ПараметрПоиска, ЗначениеЗамены); 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КА_СтрНайти(ТекстДляАнализа, ЧтоНайти, НаправлениеПоиска = Неопределено, Позиция = 0)
	
	Если Позиция = 0 Тогда
		Возврат Найти(ТекстДляАнализа, ЧтоНайти);
	Иначе
		ПозицияНайденногоТекста = КА_СтрНайти(Сред(ТекстДляАнализа, Позиция), ЧтоНайти);
		Если ПозицияНайденногоТекста = 0 Тогда
			Возврат 0;
		КонецЕсли; 
		Возврат ПозицияНайденногоТекста + Позиция - 1;
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КА_СтрЗаканчиваетсяНа(пСтрока, КонецСтроки)
	Возврат СокрЛП(КонецСтроки) = Прав(СокрЛП(пСтрока), СтрДлина(СокрЛП(КонецСтроки)));	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияПодсистемы(ИмяПодсистемы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИмяПодсистемы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия;
	КонецЕсли;
			
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияИмяКонфигурации(ИмяПодсистемы)
	Возврат Новый Структура("Имя, Версия", СокрЛП(Метаданные.Имя), СокрЛП(Метаданные.Версия));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = КА_СтрРазделить(Строка1, ".");
	Версия2 = КА_СтрРазделить(Строка2, ".");
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КА_СтрРазделить(Знач ТекстДляЗамены, Знач Разделитель = ",", ВключатьПустые = Истина)
	
	СписокРазделенных = Новый Массив;
	СписокСтрок = СтрЗаменить(ТекстДляЗамены, Разделитель, Символы.ПС);
	Для Сч = 1 По СтрЧислоСтрок(СписокСтрок) Цикл
		СтрокаТекста = СтрПолучитьСтроку(СписокСтрок, Сч);
		Если ПустаяСтрока(СтрокаТекста) И НЕ ВключатьПустые Тогда
			Продолжить;
		КонецЕсли; 
		СписокРазделенных.Добавить(СтрокаТекста);
	КонецЦикла; 
	
	Возврат СписокРазделенных;
	
КонецФункции 

&НаСервереБезКонтекста
Функция МетаданныеСуществуют(ПолноеИмя)
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмя) <> Неопределено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредопределенныйЭлементПоИмени(ИмяЭлемента)
	//ЧТОБЫ НЕ ВЫДАВАЛА ОШИБКУ ПРИ ПРОВЕРКЕ
	Возврат ПредопределенноеЗначение(ИмяЭлемента);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УбратьСлешВКонце(Путь)
	
	 СимволРазделителяСтрок = ПолучитьРазделительПути();
	 Если КА_СтрЗаканчиваетсяНа(Путь, СимволРазделителяСтрок) Тогда
		Возврат Лев(Путь, СтрДлина(Путь) - 1);
	КонецЕсли; 
	
	Возврат Путь;
	
КонецФункции 

#КонецОбласти
